//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class SendMessageResponse {
  public String request_id { get; set; }
  public String grant_id { get; set; }
  public Data data { get; set; }

  public SendMessageResponse(JSONParser parser) {
    while (parser.nextToken() != System.JSONToken.END_OBJECT) {
      if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
        String text = parser.getText();
        if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
          if (text == 'request_id') {
            request_id = parser.getText();
          } else if (text == 'grant_id') {
            grant_id = parser.getText();
          } else if (text == 'data') {
            data = new Data(parser);
          } else {
            System.debug(
              LoggingLevel.WARN,
              'SendMessageResponse consuming unrecognized property: ' + text
            );
            consumeObject(parser);
          }
        }
      }
    }
  }

  public class From_Z {
    public String name { get; set; }
    public String email { get; set; }

    public From_Z(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'name') {
              name = parser.getText();
            } else if (text == 'email') {
              email = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'From_Z consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Data {
    public String subject { get; set; }
    public String body { get; set; }
    public List<From_Z> from_Z { get; set; } // in json: from
    public List<From_Z> to { get; set; }
    public List<Attachments> attachments { get; set; }
    public String schedule_id { get; set; }
    public String reply_to_message_id { get; set; }

    public Data(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'subject') {
              subject = parser.getText();
            } else if (text == 'body') {
              body = parser.getText();
            } else if (text == 'from') {
              from_Z = arrayOfFrom_Z(parser);
            } else if (text == 'to') {
              to = arrayOfFrom_Z(parser);
            } else if (text == 'attachments') {
              attachments = arrayOfAttachments(parser);
            } else if (text == 'schedule_id') {
              schedule_id = parser.getText();
            } else if (text == 'reply_to_message_id') {
              reply_to_message_id = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Data consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public class Attachments {
    public String content { get; set; }
    public String content_type { get; set; }
    public String filename { get; set; }

    public Attachments(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'content') {
              content = parser.getText();
            } else if (text == 'content_type') {
              content_type = parser.getText();
            } else if (text == 'filename') {
              filename = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Attachments consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public static SendMessageResponse parse(String json) {
    System.JSONParser parser = System.JSON.createParser(json);
    return new SendMessageResponse(parser);
  }

  public static void consumeObject(System.JSONParser parser) {
    Integer depth = 0;
    do {
      System.JSONToken curr = parser.getCurrentToken();
      if (
        curr == System.JSONToken.START_OBJECT ||
        curr == System.JSONToken.START_ARRAY
      ) {
        depth++;
      } else if (
        curr == System.JSONToken.END_OBJECT ||
        curr == System.JSONToken.END_ARRAY
      ) {
        depth--;
      }
    } while (depth > 0 && parser.nextToken() != null);
  }

  private static List<From_Z> arrayOfFrom_Z(System.JSONParser p) {
    List<From_Z> res = new List<From_Z>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new From_Z(p));
    }
    return res;
  }

  private static List<Attachments> arrayOfAttachments(System.JSONParser p) {
    List<Attachments> res = new List<Attachments>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Attachments(p));
    }
    return res;
  }
}
