//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ReturnAllCalendarsResponse {
  public String request_id { get; set; }
  public List<Calendar> data { get; set; }
  public String next_cursor { get; set; }

  public ReturnAllCalendarsResponse(JSONParser parser) {
    while (parser.nextToken() != System.JSONToken.END_OBJECT) {
      if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
        String text = parser.getText();
        if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
          if (text == 'request_id') {
            request_id = parser.getText();
          } else if (text == 'data') {
            data = arrayOfCalendars(parser);
          } else if (text == 'next_cursor') {
            next_cursor = parser.getText();
          } else {
            System.debug(
              LoggingLevel.WARN,
              'ReturnAllCalendarsResponse consuming unrecognized property: ' +
              text
            );
            consumeObject(parser);
          }
        }
      }
    }
  }

  public class Data {
    public String description { get; set; }
    public String hex_color { get; set; }
    public String hex_foreground_color { get; set; }
    public String id { get; set; }
    public Boolean is_owned_by_user { get; set; }
    public Boolean is_primary { get; set; }
    public String location { get; set; }
    public Metadata metadata { get; set; }
    public String name { get; set; }
    public String object_Z { get; set; } // in json: object
    public Boolean read_only { get; set; }
    public String timezone { get; set; }

    public Data(JSONParser parser) {
      while (parser.nextToken() != System.JSONToken.END_OBJECT) {
        if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
          String text = parser.getText();
          if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
            if (text == 'description') {
              description = parser.getText();
            } else if (text == 'hex_color') {
              hex_color = parser.getText();
            } else if (text == 'hex_foreground_color') {
              hex_foreground_color = parser.getText();
            } else if (text == 'id') {
              id = parser.getText();
            } else if (text == 'is_owned_by_user') {
              is_owned_by_user = parser.getBooleanValue();
            } else if (text == 'is_primary') {
              is_primary = parser.getBooleanValue();
            } else if (text == 'location') {
              location = parser.getText();
            } else if (text == 'metadata') {
              metadata = new Metadata(parser);
            } else if (text == 'name') {
              name = parser.getText();
            } else if (text == 'object') {
              object_Z = parser.getText();
            } else if (text == 'read_only') {
              read_only = parser.getBooleanValue();
            } else if (text == 'timezone') {
              timezone = parser.getText();
            } else {
              System.debug(
                LoggingLevel.WARN,
                'Data consuming unrecognized property: ' + text
              );
              consumeObject(parser);
            }
          }
        }
      }
    }
  }

  public static ReturnAllCalendarsResponse parse(String json) {
    System.JSONParser parser = System.JSON.createParser(json);
    return new ReturnAllCalendarsResponse(parser);
  }

  public static void consumeObject(System.JSONParser parser) {
    Integer depth = 0;
    do {
      System.JSONToken curr = parser.getCurrentToken();
      if (
        curr == System.JSONToken.START_OBJECT ||
        curr == System.JSONToken.START_ARRAY
      ) {
        depth++;
      } else if (
        curr == System.JSONToken.END_OBJECT ||
        curr == System.JSONToken.END_ARRAY
      ) {
        depth--;
      }
    } while (depth > 0 && parser.nextToken() != null);
  }

  private static List<Calendar> arrayOfCalendars(System.JSONParser p) {
    List<Calendar> res = new List<Calendar>();
    if (p.getCurrentToken() == null)
      p.nextToken();
    while (p.nextToken() != System.JSONToken.END_ARRAY) {
      res.add(new Calendar(p));
    }
    return res;
  }
}
